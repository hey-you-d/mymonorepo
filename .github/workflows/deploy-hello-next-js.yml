name: Deploy to AWS Copilot for hello-next-js

on:
  push:
    branches:
      - dev
      - master
    paths:
      - 'myapps/hello-next-js/**'  
      - '.github/workflows/deploy-hello-next-js.yml'   
      - 'copilot/mymonorepo-svc-lb-hello-next-js-trial-1-dev/manifest.yml'

jobs:
  # CI Job: Lint, Test, and Build Next.js App
  ci-hello-next-js:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: myapps/hello-next-js

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Run Linting
        run: yarn workspace hello-next-js lint
  
      - name: Run Tests
        run: yarn test
  
      - name: Build Next.js App
        run: yarn workspace hello-next-js build  

  # CD Job: Deploy using AWS Copilot (Only if CI Passes)
  deploy:
    needs: ci-hello-next-js
    if: ${{ needs.ci-hello-next-js.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Deployment environment based on branch
        run: |
          echo "GITHUB REF -> ${{ github.ref }}"
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "DEPLOY_ENV=development" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV      
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        #run: | 
        #  ECR_REGISTRY="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"
        #  aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
        #  docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build, tag,& push docker image
        env: 
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_HELLO_NEXT_JS }}
          DOCKERFILE: "dockerfile_hellonextjs_nginx"
        run: |
          echo "Building image: $ECR_REGISTRY/$ECR_REPOSITORY:latest "
          docker build -f $DOCKERFILE -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

          echo "Verifying build image..."
          docker images | grep $ECR_REGISTRY/$ECR_REPOSITORY || echo "tagged image not found!"

          echo "Pushing the following image to ECR: $ECR_REGISTRY/$ECR_REPOSITORY:latest"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest 

      - name: Deploy to Amazon Copilot 
        run: |
          curl -Lo copilot-cli https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux
          chmod +x copilot-cli
          sudo mv copilot-cli /usr/local/bin/copilot
          echo "Deploying to the following environment: $DEPLOY_ENV"
          copilot svc deploy --name ${{ secrets.ECS_SERVICE_HELLO_NEXT_JS }} --env $DEPLOY_ENV \
          --force -- image $ECR_REGISTRY/$ECR_REPOSITORY:latest #pass explicit image     




